<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
// shader 4d4b09634a7eab30 
// Last step vertical blend. half tv scaled + pre-blending = aprox half step reduction
// To-do  candidate for multi pass / bokeh replacement
const float resScale = <?=round($scaleFactorY)/2?>;
uniform ivec4 uf_remappedPS[7];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf4fde000 res 640x360x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf51aa000 res 640x360x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 2) uniform sampler2D textureUnitPS2;// Tex2 addr 0xf4e12000 res 640x360x1 dim 1 tm: 4 format 0820 compSel: 0 1 2 3 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler2 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
//const float resScale = 2.0;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ return min(a*b,min(abs(a)*3.40282347E+38F,abs(b)*3.40282347E+38F)); }
void main()
{
vec4 R0f = vec4(0.0);
vec4 R1f = vec4(0.0);
vec4 R2f = vec4(0.0);
vec4 R3f = vec4(0.0);
vec4 R4f = vec4(0.0);
vec4 R5f = vec4(0.0);
vec4 R6f = vec4(0.0);
vec4 R7f = vec4(0.0);
vec4 R8f = vec4(0.0);
vec4 R9f = vec4(0.0);
vec4 R10f = vec4(0.0);
vec4 R11f = vec4(0.0);
vec4 R12f = vec4(0.0);
vec4 R13f = vec4(0.0);
vec4 R14f = vec4(0.0);
vec4 R15f = vec4(0.0);
vec4 R16f = vec4(0.0);
vec4 R123f = vec4(0.0);
vec4 R124f = vec4(0.0);
vec4 R125f = vec4(0.0);
vec4 R126f = vec4(0.0);
vec4 R127f = vec4(0.0);
float backupReg0f, backupReg1f, backupReg2f, backupReg3f, backupReg4f;
vec4 PV0f = vec4(0.0), PV1f = vec4(0.0);
float PS0f = 0.0, PS1f = 0.0;
vec4 tempf = vec4(0.0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0f = passParameterSem0;
R15f.xyzw = (texture(textureUnitPS2, R0f.xy).xyzw);
// 0
R1f.x = R0f.x + (intBitsToFloat(uf_remappedPS[0].x) / resScale);
R1f.y = R0f.y + (intBitsToFloat(uf_remappedPS[0].y) / resScale);
R0f.z = R0f.x + (intBitsToFloat(uf_remappedPS[0].z) / resScale);
R0f.w = R0f.y + (intBitsToFloat(uf_remappedPS[0].w) / resScale);
R16f.w = R15f.w;
PS0f = R16f.w;
// 1
R2f.x = R0f.x + (intBitsToFloat(uf_remappedPS[1].x) / resScale);
R2f.y = R0f.y + (intBitsToFloat(uf_remappedPS[1].y) / resScale);
R1f.z = R0f.x + (intBitsToFloat(uf_remappedPS[1].z) / resScale);
R1f.w = R0f.y + (intBitsToFloat(uf_remappedPS[1].w) / resScale);
// 2
R3f.x = R0f.x + (intBitsToFloat(uf_remappedPS[2].x) / resScale);
R3f.y = R0f.y + (intBitsToFloat(uf_remappedPS[2].y) / resScale);
R2f.z = R0f.x + (intBitsToFloat(uf_remappedPS[2].z) / resScale);
R2f.w = R0f.y + (intBitsToFloat(uf_remappedPS[2].w) / resScale);
// 3
R4f.x = R0f.x + (intBitsToFloat(uf_remappedPS[3].x) / resScale);
R4f.y = R0f.y + (intBitsToFloat(uf_remappedPS[3].y) / resScale);
R3f.z = R0f.x + (intBitsToFloat(uf_remappedPS[3].z) / resScale);
R3f.w = R0f.y + (intBitsToFloat(uf_remappedPS[3].w)/ resScale);
R5f.xyzw = (texture(textureUnitPS1, R1f.xy).xyzw);
R6f.xyzw = (texture(textureUnitPS1, R0f.zw).xyzw);
R7f.xyzw = (texture(textureUnitPS1, R2f.xy).xyzw);
R9f.xyzw = (texture(textureUnitPS1, R1f.zw).xyzw);
R8f.xyzw = (texture(textureUnitPS1, R3f.xy).xyzw);
R11f.xyzw = (texture(textureUnitPS1, R2f.zw).xyzw);
R10f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R12f.xyzw = (texture(textureUnitPS0, R3f.zw).xyzw);
// 0
R4f.x = R0f.x + (intBitsToFloat(uf_remappedPS[4].x) / resScale);
R4f.y = R0f.y + (intBitsToFloat(uf_remappedPS[4].y) / resScale);
R3f.z = R0f.x + (intBitsToFloat(uf_remappedPS[4].z) / resScale);
R3f.w = R0f.y + (intBitsToFloat(uf_remappedPS[4].w) / resScale);
R127f.z = R5f.w + -(0.5);
R127f.z *= 2.0;
R127f.z = clamp(R127f.z, 0.0, 1.0);
PS0f = R127f.z;
// 1
backupReg0f = R0f.x;
backupReg1f = R0f.y;
backupReg0f = R0f.x;
backupReg1f = R0f.y;
R0f.x = backupReg0f + (intBitsToFloat(uf_remappedPS[5].x) / resScale);
R0f.y = backupReg1f + (intBitsToFloat(uf_remappedPS[5].y) / resScale);
R2f.z = backupReg0f + (intBitsToFloat(uf_remappedPS[5].z) / resScale);
R2f.w = backupReg1f + (intBitsToFloat(uf_remappedPS[5].w) / resScale);
PS1f = R5f.x + -(0.0);
// 2
PV0f.x = R5f.y + -(0.0);
R127f.y = R6f.w + -(0.5);
R127f.y *= 2.0;
R127f.y = clamp(R127f.y, 0.0, 1.0);
R126f.z = R127f.z + 1.0;
PV0f.w = R5f.z + -(0.0);
R125f.z = (R127f.z * PS1f + R15f.x);
PS0f = R125f.z;
// 3
R123f.x = (R127f.z * PV0f.w + R15f.z);
PV1f.x = R123f.x;
R123f.y = (R127f.z * PV0f.x + R15f.y);
PV1f.y = R123f.y;
PV1f.z = R6f.x + -(0.0);
PV1f.w = R6f.y + -(0.0);
PS1f = R6f.z + -(0.0);
// 4
R3f.x = (R127f.y * PV1f.w + PV1f.y);
R3f.y = (R127f.y * PV1f.z + R125f.z);
R1f.z = R7f.w + -(0.5);
R1f.z *= 2.0;
R1f.z = clamp(R1f.z, 0.0, 1.0);
R1f.w = R126f.z + R127f.y;
R0f.w = (R127f.y * PS1f + PV1f.x);
PS0f = R0f.w;
R4f.xyzw = (texture(textureUnitPS0, R4f.xy).xyzw);
R13f.xyzw = (texture(textureUnitPS0, R3f.zw).xyzw);
R14f.xyzw = (texture(textureUnitPS0, R0f.xy).xyzw);
R2f.xyzw = (texture(textureUnitPS0, R2f.zw).xyzw);
// 0
PV0f.x = R7f.y + -(0.0);
PV0f.y = R7f.x + -(0.0);
R126f.z = R1f.w + R1f.z;
PV0f.w = R7f.z + -(0.0);
R127f.x = R9f.w + -(0.5);
R127f.x *= 2.0;
R127f.x = clamp(R127f.x, 0.0, 1.0);
PS0f = R127f.x;
// 1
R126f.x = (R1f.z * PV0f.w + R0f.w);
R123f.y = (R1f.z * PV0f.x + R3f.x);
PV1f.y = R123f.y;
R123f.z = (R1f.z * PV0f.y + R3f.y);
PV1f.z = R123f.z;
PV1f.w = R9f.x + -(0.0);
PS1f = R9f.y + -(0.0);
// 2
backupReg0f = R126f.z;
R125f.x = R8f.w + -(0.5);
R125f.x *= 2.0;
R125f.x = clamp(R125f.x, 0.0, 1.0);
PV0f.y = R9f.z + -(0.0);
R126f.z = backupReg0f + R127f.x;
R127f.w = (R127f.x * PV1f.w + PV1f.z);
R126f.w = (R127f.x * PS1f + PV1f.y);
PS0f = R126f.w;
// 3
PV1f.x = R8f.x + -(0.0);
PV1f.y = R8f.y + -(0.0);
R123f.z = (R127f.x * PV0f.y + R126f.x);
PV1f.z = R123f.z;
R125f.w = R5f.w + -(intBitsToFloat(0x3f666666));
PS1f = R8f.z + -(0.0);
// 4
backupReg0f = R125f.x;
backupReg0f = R125f.x;
backupReg1f = R126f.z;
backupReg0f = R125f.x;
backupReg0f = R125f.x;
R125f.x = (backupReg0f * PV1f.y + R126f.w);
R127f.y = (backupReg0f * PV1f.x + R127f.w);
R126f.z = backupReg1f + backupReg0f;
R127f.w = R11f.w + -(0.5);
R127f.w *= 2.0;
R127f.w = clamp(R127f.w, 0.0, 1.0);
R126f.w = (backupReg0f * PS1f + PV1f.z);
PS0f = R126f.w;
// 5
R127f.x = -(R15f.y) + R5f.y;
R126f.y = -(R15f.x) + R5f.x;
R125f.z = R125f.w * intBitsToFloat(0x41200000);
R125f.z = clamp(R125f.z, 0.0, 1.0);
R125f.w = -(R15f.z) + R5f.z;
R127f.z = R6f.w + -(intBitsToFloat(0x3f666666));
PS1f = R127f.z;
// 6
PV0f.x = R11f.x + -(0.0);
PV0f.y = R11f.y + -(0.0);
R124f.z = R8f.w + -(intBitsToFloat(0x3f666666));
R124f.w = R7f.w + -(intBitsToFloat(0x3f666666));
PS0f = R11f.z + -(0.0);
// 7
backupReg0f = R125f.x;
backupReg1f = R127f.w;
backupReg2f = R127f.y;
backupReg1f = R127f.w;
R125f.x = R10f.w + -(0.5);
R125f.x *= 2.0;
R125f.x = clamp(R125f.x, 0.0, 1.0);
R127f.y = R126f.z + R127f.w;
R126f.z = (R127f.w * PV0f.y + backupReg0f);
R127f.w = (backupReg1f * PV0f.x + backupReg2f);
R125f.y = (backupReg1f * PS0f + R126f.w);
PS1f = R125f.y;
// 8
backupReg0f = R127f.x;
backupReg1f = R126f.y;
backupReg2f = R127f.z;
R127f.x = (R125f.w * R125f.z + R15f.z);
R126f.y = (backupReg0f * R125f.z + R15f.y);
R127f.z = (backupReg1f * R125f.z + R15f.x);
R125f.w = backupReg2f * intBitsToFloat(0x41200000);
R125f.w = clamp(R125f.w, 0.0, 1.0);
R126f.x = -(R15f.x) + R6f.x;
PS0f = R126f.x;
// 9
R6f.x = R124f.w * intBitsToFloat(0x41200000);
R6f.x = clamp(R6f.x, 0.0, 1.0);
R124f.y = -(R15f.x) + R7f.x;
R125f.z = -(R15f.z) + R6f.z;
R124f.w = -(R15f.y) + R6f.y;
R124f.x = -(R15f.y) + R7f.y;
PS1f = R124f.x;
// 10
R7f.x = R124f.z * intBitsToFloat(0x41200000);
R7f.x = clamp(R7f.x, 0.0, 1.0);
R7f.y = R9f.w + -(intBitsToFloat(0x3f666666));
R124f.z = -(R15f.x) + R8f.x;
R126f.w = -(R15f.z) + R7f.z;
R7f.w = -(R15f.y) + R8f.y;
PS0f = R7f.w;
// 11
backupReg0f = R8f.z;
PV1f.x = R10f.y + -(0.0);
PV1f.y = R10f.z + -(0.0);
R8f.z = -(R15f.z) + backupReg0f;
PV1f.w = R10f.x + -(0.0);
R8f.y = R10f.w + -(intBitsToFloat(0x3f666666));
PS1f = R8f.y;
// 12
backupReg0f = R125f.x;
backupReg0f = R125f.x;
backupReg1f = R127f.y;
backupReg0f = R125f.x;
backupReg0f = R125f.x;
R125f.x = (backupReg0f * PV1f.w + R127f.w);
R127f.y = (backupReg0f * PV1f.x + R126f.z);
R126f.z = R12f.w + -(0.5);
R126f.z *= 2.0;
R126f.z = clamp(R126f.z, 0.0, 1.0);
R127f.w = backupReg1f + backupReg0f;
R7f.z = (backupReg0f * PV1f.y + R125f.y);
PS0f = R7f.z;
// 13
backupReg0f = R126f.x;
backupReg1f = R126f.y;
backupReg2f = R127f.z;
backupReg3f = R124f.w;
R126f.x = max(R15f.z, R127f.x);
R126f.y = (backupReg0f * R125f.w + R15f.x);
R127f.z = max(R15f.y, backupReg1f);
R124f.w = max(R15f.x, backupReg2f);
R127f.x = (backupReg3f * R125f.w + R15f.y);
PS1f = R127f.x;
// 14
backupReg0f = R6f.x;
backupReg0f = R6f.x;
backupReg1f = R124f.y;
backupReg0f = R6f.x;
backupReg2f = R125f.z;
R6f.x = (R126f.w * backupReg0f + R15f.z);
R124f.y = (R124f.x * backupReg0f + R15f.y);
R125f.z = (backupReg1f * backupReg0f + R15f.x);
R126f.w = (backupReg2f * R125f.w + R15f.z);
R8f.x = R7f.y * intBitsToFloat(0x41200000);
R8f.x = clamp(R8f.x, 0.0, 1.0);
PS0f = R8f.x;
// 15
backupReg0f = R9f.x;
R9f.x = (R124f.z * R7f.x + R15f.x);
R125f.y = -(R15f.z) + R9f.z;
R9f.z = -(R15f.y) + R9f.y;
R9f.w = -(R15f.x) + backupReg0f;
R124f.x = (R7f.w * R7f.x + R15f.y);
PS1f = R124f.x;
// 16
backupReg0f = R8f.y;
backupReg1f = R8f.z;
backupReg2f = R7f.x;
R7f.x = R11f.w + -(intBitsToFloat(0x3f666666));
R8f.y = backupReg0f * intBitsToFloat(0x41200000);
R8f.y = clamp(R8f.y, 0.0, 1.0);
R8f.z = -(R15f.x) + R10f.x;
R7f.w = (backupReg1f * backupReg2f + R15f.z);
R6f.z = -(R15f.y) + R10f.y;
PS0f = R6f.z;
// 17
PV1f.x = R12f.x + -(0.0);
R10f.y = -(R15f.z) + R10f.z;
R124f.z = R12f.y + -(0.0);
R125f.w = R12f.z + -(0.0);
R8f.w = R4f.w + -(0.5);
R8f.w *= 2.0;
R8f.w = clamp(R8f.w, 0.0, 1.0);
PS1f = R8f.w;
// 18
R10f.x = R127f.w + R126f.z;
R9f.y = R4f.w + -(intBitsToFloat(0x3f666666));
R10f.z = max(R124f.w, R126f.y);
R10f.w = max(R127f.z, R127f.x);
R5f.z = (R126f.z * PV1f.x + R125f.x);
PS0f = R5f.z;
// 19
backupReg0f = R7f.z;
backupReg1f = R7f.w;
backupReg2f = R6f.x;
R6f.x = max(R126f.x, R126f.w);
R7f.y = (R126f.z * R124f.z + R127f.y);
R7f.z = (R126f.z * R125f.w + backupReg0f);
R7f.w = max(R124f.x, R124f.y);
R6f.w = max(backupReg1f, backupReg2f);
PS1f = R6f.w;
// 20
backupReg0f = R8f.x;
backupReg0f = R8f.x;
backupReg1f = R9f.z;
backupReg0f = R8f.x;
R8f.x = (R9f.w * backupReg0f + R15f.x);
R6f.y = max(R9f.x, R125f.z);
R9f.z = (R125f.y * backupReg0f + R15f.z);
R9f.w = (backupReg1f * backupReg0f + R15f.y);
R5f.y = -(R15f.y) + R11f.y;
PS0f = R5f.y;
// 21
backupReg0f = R7f.x;
backupReg1f = R10f.y;
R7f.x = -(R15f.z) + R11f.z;
R10f.y = (R8f.z * R8f.y + R15f.x);
R11f.z = -(R15f.x) + R11f.x;
R11f.w = backupReg0f * intBitsToFloat(0x41200000);
R11f.w = clamp(R11f.w, 0.0, 1.0);
R8f.z = (backupReg1f * R8f.y + R15f.z);
PS1f = R8f.z;
// 0
R124f.x = R12f.w + -(intBitsToFloat(0x3f666666));
R125f.y = R4f.y + -(0.0);
R125f.z = R4f.x + -(0.0);
R126f.w = (R6f.z * R8f.y + R15f.y);
R126f.x = R4f.z + -(0.0);
PS0f = R126f.x;
// 1
R127f.x = -(R15f.z) + R4f.z;
R127f.y = -(R15f.y) + R4f.y;
R126f.z = -(R15f.x) + R4f.x;
R125f.w = R9f.y * intBitsToFloat(0x41200000);
R125f.w = clamp(R125f.w, 0.0, 1.0);
R124f.z = R10f.x + R8f.w;
PS1f = R124f.z;
// 2
R125f.x = max(R10f.z, R8f.x);
R124f.y = R13f.w + -(0.5);
R124f.y *= 2.0;
R124f.y = clamp(R124f.y, 0.0, 1.0);
R127f.z = max(R6f.x, R9f.z);
R127f.w = R14f.w + -(intBitsToFloat(0x3f666666));
R9f.z = (R8f.w * R125f.y + R7f.y);
PS0f = R9f.z;
// 3
backupReg0f = R6f.y;
backupReg1f = R125f.z;
backupReg2f = R126f.x;
R126f.x = max(R10f.w, R9f.w);
R6f.y = R124f.x * intBitsToFloat(0x41200000);
R6f.y = clamp(R6f.y, 0.0, 1.0);
R125f.z = max(R10f.y, backupReg0f);
R124f.w = (R8f.w * backupReg1f + R5f.z);
R126f.y = (R8f.w * backupReg2f + R7f.z);
PS1f = R126f.y;
// 4
backupReg0f = R12f.x;
backupReg1f = R12f.y;
R12f.x = max(R8f.z, R6f.w);
R12f.y = max(R126f.w, R7f.w);
R5f.z = -(R15f.x) + backupReg0f;
R6f.w = -(R15f.y) + backupReg1f;
R7f.w = -(R15f.z) + R12f.z;
PS0f = R7f.w;
// 5
backupReg0f = R127f.y;
R124f.x = (R126f.z * R125f.w + R15f.x);
R127f.y = (R7f.x * R11f.w + R15f.z);
R126f.z = (R5f.y * R11f.w + R15f.y);
R126f.w = (R11f.z * R11f.w + R15f.x);
R8f.z = (backupReg0f * R125f.w + R15f.y);
PS1f = R8f.z;
// 6
backupReg0f = R127f.x;
backupReg1f = R125f.w;
R127f.x = R13f.x + -(0.0);
R125f.y = R13f.y + -(0.0);
R11f.z = R13f.z + -(0.0);
R125f.w = (backupReg0f * backupReg1f + R15f.z);
R12f.z = R13f.w + -(intBitsToFloat(0x3f666666));
PS0f = R12f.z;
// 7
backupReg0f = R124f.z;
R6f.x = R127f.w * intBitsToFloat(0x41200000);
R6f.x = clamp(R6f.x, 0.0, 1.0);
R5f.y = -(R15f.x) + R14f.x;
R124f.z = R14f.w + -(0.5);
R124f.z *= 2.0;
R124f.z = clamp(R124f.z, 0.0, 1.0);
R127f.w = backupReg0f + R124f.y;
R7f.x = -(R15f.y) + R14f.y;
PS1f = R7f.x;
// 8
backupReg0f = R126f.z;
backupReg1f = R127f.x;
R127f.x = max(R125f.x, R126f.w);
R10f.y = R2f.w + -(intBitsToFloat(0x3f666666));
R126f.z = max(R126f.x, backupReg0f);
R126f.w = -(R15f.z) + R14f.z;
R7f.y = (R124f.y * backupReg1f + R124f.w);
PS0f = R7f.y;
// 9
backupReg0f = R127f.y;
backupReg1f = R125f.z;
R125f.x = (R124f.y * R125f.y + R9f.z);
R127f.y = max(R125f.w, R12f.x);
R125f.z = max(R127f.z, backupReg0f);
R11f.w = max(R124f.x, backupReg1f);
R125f.y = R14f.x + -(0.0);
PS1f = R125f.y;
// 10
backupReg0f = R8f.z;
backupReg1f = R12f.y;
R12f.x = -(R15f.x) + R13f.x;
R12f.y = R12f.z * intBitsToFloat(0x41200000);
R12f.y = clamp(R12f.y, 0.0, 1.0);
R8f.z = max(backupReg0f, backupReg1f);
R124f.w = (R124f.y * R11f.z + R126f.y);
R8f.x = R2f.w + -(0.5);
R8f.x *= 2.0;
R8f.x = clamp(R8f.x, 0.0, 1.0);
PS0f = R8f.x;
// 11
R124f.x = (R7f.w * R6f.y + R15f.z);
R126f.y = (R6f.w * R6f.y + R15f.y);
R127f.z = (R5f.z * R6f.y + R15f.x);
R6f.w = -(R15f.y) + R13f.y;
R5f.z = -(R15f.z) + R13f.z;
PS1f = R5f.z;
// 12
backupReg0f = R14f.z;
backupReg1f = R126f.w;
R126f.x = R14f.y + -(0.0);
R124f.y = (R7f.x * R6f.x + R15f.y);
R14f.z = (R5f.y * R6f.x + R15f.x);
R125f.w = backupReg0f + -(0.0);
R126f.w = (backupReg1f * R6f.x + R15f.z);
PS0f = R126f.w;
// 13
R6f.x = R10f.y * intBitsToFloat(0x41200000);
R6f.x = clamp(R6f.x, 0.0, 1.0);
R10f.y = -(R15f.y) + R2f.y;
R13f.z = R127f.w + R124f.z;
R127f.w = -(R15f.x) + R2f.x;
R5f.y = -(R15f.z) + R2f.z;
PS1f = R5f.y;
// 14
backupReg0f = R127f.x;
backupReg1f = R127f.z;
R127f.x = max(R126f.w, R127f.y);
R127f.y = max(R125f.z, R124f.x);
R127f.z = max(R126f.z, R126f.y);
R126f.w = max(backupReg0f, backupReg1f);
R14f.w = R2f.x + -(0.0);
PS0f = R14f.w;
// 15
backupReg0f = R126f.x;
backupReg1f = R124f.z;
backupReg2f = R125f.y;
R126f.x = (R124f.z * R125f.w + R124f.w);
R125f.y = (R124f.z * backupReg0f + R125f.x);
R124f.z = (backupReg1f * backupReg2f + R7f.y);
R124f.w = max(R14f.z, R11f.w);
R11f.w = max(R124f.y, R8f.z);
PS1f = R11f.w;
// 16
R123f.x = (R6f.w * R12f.y + R15f.y);
PV0f.x = R123f.x;
R123f.y = (R12f.x * R12f.y + R15f.x);
PV0f.y = R123f.y;
R126f.z = R2f.y + -(0.0);
R125f.w = (R5f.z * R12f.y + R15f.z);
R124f.y = R2f.z + -(0.0);
PS0f = R124f.y;
// 17
backupReg0f = R127f.z;
R125f.x = (R127f.w * R6f.x + R15f.x);
R126f.y = max(R126f.w, PV0f.y);
R127f.z = (R5f.y * R6f.x + R15f.z);
R127f.w = (R10f.y * R6f.x + R15f.y);
R5f.y = max(backupReg0f, PV0f.x);
PS1f = R5f.y;
// 18
backupReg0f = R126f.z;
backupReg1f = R126f.x;
R126f.x = max(R127f.y, R125f.w);
R127f.y = (R8f.x * R14f.w + R124f.z);
R126f.z = (R8f.x * backupReg0f + R125f.y);
PV0f.w = R13f.z + R8f.x;
R124f.z = (R8f.x * R124f.y + backupReg1f);
PS0f = R124f.z;
// 19
PV1f.x = max(R127f.w, R11f.w);
PV1f.y = max(R125f.x, R124f.w);
PV1f.w = max(R127f.z, R127f.x);
R127f.z = 1.0 / PV0f.w;
PS1f = R127f.z;
// 20
backupReg0f = R126f.x;
R126f.x = max(backupReg0f, PV1f.w);
PV0f.y = max(R5f.y, PV1f.x);
PV0f.z = max(R126f.y, PV1f.y);
R127f.w = R127f.y * PS1f;
PV0f.w = R127f.w;
R127f.x = R126f.z * PS1f;
PS0f = R127f.x;
// 21
PV1f.y = PV0f.y + -(PS0f);
PV1f.z = PV0f.z + -(PV0f.w);
R124f.w = R124f.z * R127f.z;
PV1f.w = R124f.w;
// 22
PV0f.x = R126f.x + -(PV1f.w);
R16f.y = (PV1f.y * intBitsToFloat(uf_remappedPS[6].x) + R127f.x);
R16f.x = (PV1f.z * intBitsToFloat(uf_remappedPS[6].x) + R127f.w);
PS0f = R16f.x;
// 23
R16f.z = (PV0f.x * intBitsToFloat(uf_remappedPS[6].x) + R124f.w);
// export
passPixelColor0 = vec4(R16f.x, R16f.y, R16f.z, R16f.w);
}
