<?php
include 'Source/functions.php';
$fullWidth = $argv[1];
$fullHeight = $argv[2];
$scaleFactorX = always_decimal_format($fullWidth / 1280.0);
$scaleFactorY = always_decimal_format($fullHeight / 720.0);
?>

#version 420
#extension GL_ARB_texture_gather : enable
#extension GL_ARB_separate_shader_objects : enable
// shader b77e14af90eec1bd
//skell view separate AA fix
const float resScale = <?=$scaleFactorX?>;
uniform ivec4 uf_remappedPS[3];
layout(binding = 0) uniform sampler2D textureUnitPS0;// Tex0 addr 0xf5f0a000 res 640x360x1 dim 1 tm: 4 format 080e compSel: 0 4 4 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler0 ClampX/Y/Z: 2 2 2 border: 0
layout(binding = 1) uniform sampler2D textureUnitPS1;// Tex1 addr 0xf470a000 res 1280x720x1 dim 1 tm: 4 format 0816 compSel: 0 1 2 5 mipView: 0x0 (num 0x1) sliceView: 0x0 (num 0x1) Sampler1 ClampX/Y/Z: 2 2 2 border: 0
layout(location = 0) in vec4 passParameterSem0;
layout(location = 1) in vec4 passParameterSem1;
layout(location = 2) in vec4 passParameterSem2;
layout(location = 0) out vec4 passPixelColor0;
uniform vec2 uf_fragCoordScale;
int clampFI32(int v)
{
if( v == 0x7FFFFFFF )
	return floatBitsToInt(1.0);
else if( v == 0xFFFFFFFF )
	return floatBitsToInt(0.0);
return floatBitsToInt(clamp(intBitsToFloat(v), 0.0, 1.0));
}
float mul_nonIEEE(float a, float b){ if( a == 0.0 || b == 0.0 ) return 0.0; return a*b; }
void main()
{
ivec4 R0i = ivec4(0);
ivec4 R1i = ivec4(0);
ivec4 R2i = ivec4(0);
ivec4 R3i = ivec4(0);
ivec4 R4i = ivec4(0);
ivec4 R5i = ivec4(0);
ivec4 R6i = ivec4(0);
ivec4 R7i = ivec4(0);
ivec4 R123i = ivec4(0);
ivec4 R125i = ivec4(0);
ivec4 R126i = ivec4(0);
ivec4 R127i = ivec4(0);
int backupReg0i, backupReg1i, backupReg2i, backupReg3i, backupReg4i;
ivec4 PV0i = ivec4(0), PV1i = ivec4(0);
int PS0i = 0, PS1i = 0;
ivec4 tempi = ivec4(0);
float tempResultf;
int tempResulti;
ivec4 ARi = ivec4(0);
bool predResult = true;
bool activeMaskStack[2];
bool activeMaskStackC[3];
activeMaskStack[0] = false;
activeMaskStackC[0] = false;
activeMaskStackC[1] = false;
activeMaskStack[0] = true;
activeMaskStackC[0] = true;
activeMaskStackC[1] = true;
vec3 cubeMapSTM;
int cubeMapFaceId;
R0i = floatBitsToInt(passParameterSem0);
R1i = floatBitsToInt(passParameterSem1);
R2i = floatBitsToInt(passParameterSem2);
if( activeMaskStackC[1] == true ) {
R3i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.zy)).xyz);
R4i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xy)).xyz);
R5i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xw)).xyz);
R1i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.zw)).xyz);
R6i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).xyz);
R7i.x = floatBitsToInt(texture(textureUnitPS0, intBitsToFloat(R0i.xy)).x);
}
if( activeMaskStackC[1] == true ) {
// 0
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R3i.x),intBitsToFloat(R3i.y),intBitsToFloat(R3i.z),-0.0),vec4(intBitsToFloat(0x3e991687)/resScale,intBitsToFloat(0x3f1645a2)/resScale,intBitsToFloat(0x3de978d5)/resScale,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.w = tempi.x;
R127i.z = 0;
PS0i = R127i.z;
// 1
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R4i.x),intBitsToFloat(R4i.y),intBitsToFloat(R4i.z),-0.0),vec4(intBitsToFloat(0x3e991687)/resScale,intBitsToFloat(0x3f1645a2)/resScale,intBitsToFloat(0x3de978d5)/resScale,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.w = tempi.x;
PS1i = floatBitsToInt(intBitsToFloat(R5i.z) * intBitsToFloat(0x3de978d5)/resScale);
// 2
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R5i.x),intBitsToFloat(R5i.y),intBitsToFloat(PS1i),-0.0),vec4(intBitsToFloat(0x3e991687)/resScale,intBitsToFloat(0x3f1645a2)/resScale,1.0,0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.y = tempi.x;
R127i.x = floatBitsToInt(intBitsToFloat(R127i.w) + intBitsToFloat(0x3b2aaaab)/resScale);
PS0i = R127i.x;
// 3
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R1i.x),intBitsToFloat(R1i.y),intBitsToFloat(R1i.z),-0.0),vec4(intBitsToFloat(0x3e991687)/resScale,intBitsToFloat(0x3f1645a2)/resScale,intBitsToFloat(0x3de978d5)/resScale,0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
R126i.y = floatBitsToInt(min(intBitsToFloat(R126i.w), intBitsToFloat(PV0i.x)));
PS1i = R126i.y;
// 4
R126i.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(R127i.y),intBitsToFloat(PV1i.x),intBitsToFloat(R126i.w)),vec4(-(1.0),1.0,1.0,-(1.0))));
PV0i.x = R126i.x;
PV0i.y = R126i.x;
PV0i.z = R126i.x;
PV0i.w = R126i.x;
R125i.x = floatBitsToInt(min(intBitsToFloat(R127i.x), intBitsToFloat(PV1i.x)));
PS0i = R125i.x;
// 5
backupReg0i = R127i.y;
backupReg1i = R126i.w;
backupReg0i = R127i.y;
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R127i.x),intBitsToFloat(backupReg0i),intBitsToFloat(R126i.z),intBitsToFloat(R126i.w)),vec4(-(1.0),1.0,-(1.0),1.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R127i.y = tempi.x;
R126i.w = floatBitsToInt(max(intBitsToFloat(backupReg1i), intBitsToFloat(backupReg0i)));
PS1i = R126i.w;
// 6
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.x),intBitsToFloat(R127i.z),-0.0),vec4(intBitsToFloat(R126i.x),intBitsToFloat(PV1i.x),intBitsToFloat(R127i.z),0.0)));
PV0i.x = tempi.x;
PV0i.y = tempi.x;
PV0i.z = tempi.x;
PV0i.w = tempi.x;
R127i.z = floatBitsToInt(max(intBitsToFloat(R127i.x), intBitsToFloat(R126i.z)));
PS0i = R127i.z;
// 7
tempi.x = floatBitsToInt(dot(vec4(intBitsToFloat(R6i.x),intBitsToFloat(R6i.y),intBitsToFloat(R6i.z),-0.0),vec4(intBitsToFloat(0x3e991687),intBitsToFloat(0x3f1645a2),intBitsToFloat(0x3de978d5),0.0)));
PV1i.x = tempi.x;
PV1i.y = tempi.x;
PV1i.z = tempi.x;
PV1i.w = tempi.x;
R126i.z = tempi.x;
tempResultf = 1.0 / sqrt(intBitsToFloat(PV0i.x));
PS1i = floatBitsToInt(tempResultf);
// 8
R0i.y = floatBitsToInt(max(intBitsToFloat(R126i.w), intBitsToFloat(R127i.z)));
PV0i.y = R0i.y;
R125i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R126i.x), intBitsToFloat(PS1i)));
PV0i.z = R125i.z;
R126i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(R127i.y), intBitsToFloat(PS1i)));
PV0i.w = R126i.w;
R0i.w = floatBitsToInt(min(intBitsToFloat(R126i.y), intBitsToFloat(R125i.x)));
PS0i = R0i.w;
// 9
PV1i.x = floatBitsToInt(max(intBitsToFloat(PV0i.w), -(intBitsToFloat(PV0i.w))));
PV1i.y = floatBitsToInt(max(intBitsToFloat(PV0i.z), -(intBitsToFloat(PV0i.z))));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.z), intBitsToFloat(uf_remappedPS[0].x)/resScale));
PV1i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[0].y)/resScale));
R127i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.y), intBitsToFloat(uf_remappedPS[1].x)/resScale));
PS1i = R127i.z;
// 10
R1i.x = floatBitsToInt(intBitsToFloat(R2i.x) + -(intBitsToFloat(PV1i.z)));
R1i.y = floatBitsToInt(intBitsToFloat(R2i.y) + -(intBitsToFloat(PV1i.w)));
R5i.z = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(PV1i.z));
PV0i.w = floatBitsToInt(min(intBitsToFloat(PV1i.y), intBitsToFloat(PV1i.x)));
R5i.y = floatBitsToInt(intBitsToFloat(R2i.y) + intBitsToFloat(PV1i.w));
PS0i = R5i.y;
// 11
backupReg0i = R0i.y;
PV1i.y = floatBitsToInt(min(intBitsToFloat(R126i.z), intBitsToFloat(R0i.w)));
PV1i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV0i.w), intBitsToFloat(uf_remappedPS[1].z)));
PV1i.w = floatBitsToInt(max(intBitsToFloat(R126i.z), intBitsToFloat(backupReg0i)));
R3i.y = floatBitsToInt(max(intBitsToFloat(R127i.z), intBitsToFloat(uf_remappedPS[1].y)));
PS1i = R3i.y;
// 12
R0i.x = floatBitsToInt(-(intBitsToFloat(PV1i.y)) + intBitsToFloat(PV1i.w));
PS0i = floatBitsToInt(1.0 / intBitsToFloat(PV1i.z));
// 13
PV1i.x = floatBitsToInt(intBitsToFloat(R125i.z) * intBitsToFloat(PS0i));
PV1i.w = floatBitsToInt(intBitsToFloat(R126i.w) * intBitsToFloat(PS0i));
// 14
PV0i.y = floatBitsToInt(max(intBitsToFloat(PV1i.w), intBitsToFloat(0xc0000000)/resScale));
PV0i.z = floatBitsToInt(max(intBitsToFloat(PV1i.x), intBitsToFloat(0xc0000000)/resScale));
// 15
PV1i.x = floatBitsToInt(min(intBitsToFloat(PV0i.z), 2.0));
PV1i.w = floatBitsToInt(min(intBitsToFloat(PV0i.y), 2.0));
// 16
PV0i.z = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.x), intBitsToFloat(uf_remappedPS[0].z)/resScale));
PV0i.w = floatBitsToInt(mul_nonIEEE(intBitsToFloat(PV1i.w), intBitsToFloat(uf_remappedPS[0].w)/resScale));
// 17
backupReg0i = R2i.x;
backupReg1i = R2i.y;
backupReg0i = R2i.x;
backupReg1i = R2i.y;
R2i.x = floatBitsToInt(intBitsToFloat(backupReg0i) + -(intBitsToFloat(PV0i.z)));
R2i.y = floatBitsToInt(intBitsToFloat(backupReg1i) + -(intBitsToFloat(PV0i.w)));
R1i.z = floatBitsToInt(intBitsToFloat(backupReg0i) + intBitsToFloat(PV0i.z));
R1i.w = floatBitsToInt(intBitsToFloat(backupReg1i) + intBitsToFloat(PV0i.w));
}
if( activeMaskStackC[1] == true ) {
R4i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.xy)).xyz);
R5i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R5i.zy)).xyz);
R2i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R2i.xy)).xyz);
R1i.xyz = floatBitsToInt(texture(textureUnitPS1, intBitsToFloat(R1i.zw)).xyz);
}
if( activeMaskStackC[1] == true ) {
activeMaskStack[1] = activeMaskStack[0];
activeMaskStackC[2] = activeMaskStackC[1];
// 0
backupReg0i = R0i.x;
predResult = (intBitsToFloat(R3i.y) > intBitsToFloat(backupReg0i));
activeMaskStack[1] = predResult;
activeMaskStackC[2] = predResult == true && activeMaskStackC[1] == true;
}
else {
activeMaskStack[1] = false;
activeMaskStackC[2] = false;
}
if( activeMaskStackC[2] == true ) {
// 0
R6i.w = 0x3f800000;
}
activeMaskStack[1] = activeMaskStack[1] == false;
activeMaskStackC[2] = activeMaskStack[1] == true && activeMaskStackC[1] == true;
if( activeMaskStackC[2] == true ) {
// 0
R127i.x = floatBitsToInt(intBitsToFloat(R2i.z) + intBitsToFloat(R1i.z));
PV0i.y = floatBitsToInt(intBitsToFloat(R2i.y) + intBitsToFloat(R1i.y));
PV0i.z = floatBitsToInt(intBitsToFloat(R2i.x) + intBitsToFloat(R1i.x));
// 1
PV1i.x = floatBitsToInt(intBitsToFloat(R4i.y) + intBitsToFloat(R5i.y));
PV1i.y = floatBitsToInt(intBitsToFloat(R4i.x) + intBitsToFloat(R5i.x));
PV1i.z = floatBitsToInt(intBitsToFloat(PV0i.y) * 0.25);
R127i.w = floatBitsToInt(intBitsToFloat(R4i.z) + intBitsToFloat(R5i.z));
PS1i = floatBitsToInt(intBitsToFloat(PV0i.z) * 0.25);
// 2
backupReg0i = R127i.x;
R127i.x = floatBitsToInt((intBitsToFloat(PV1i.y) * 0.25 + intBitsToFloat(PS1i)));
PV0i.y = floatBitsToInt(intBitsToFloat(backupReg0i) * 0.25);
R127i.z = PV1i.y;
R127i.z = floatBitsToInt(intBitsToFloat(R127i.z) / 2.0);
R126i.w = floatBitsToInt((intBitsToFloat(PV1i.x) * 0.25 + intBitsToFloat(PV1i.z)));
PV0i.w = R126i.w;
R127i.y = PV1i.x;
R127i.y = floatBitsToInt(intBitsToFloat(R127i.y) / 2.0);
PS0i = R127i.y;
// 3
backupReg0i = R127i.w;
PV1i.x = ((intBitsToFloat(PV0i.w) > intBitsToFloat(R0i.y))?int(0xFFFFFFFF):int(0x0));
PV1i.y = ((intBitsToFloat(R0i.w) > intBitsToFloat(PV0i.w))?int(0xFFFFFFFF):int(0x0));
R126i.z = floatBitsToInt((intBitsToFloat(R127i.w) * 0.25 + intBitsToFloat(PV0i.y)));
R127i.w = backupReg0i;
R127i.w = floatBitsToInt(intBitsToFloat(R127i.w) / 2.0);
// 4
R123i.w = ((PV1i.y == 0)?(PV1i.x):(int(-1)));
PV0i.w = R123i.w;
// 5
R6i.x = ((PV0i.w == 0)?(R127i.x):(R127i.z));
R6i.y = ((PV0i.w == 0)?(R126i.w):(R127i.y));
R6i.z = ((PV0i.w == 0)?(R126i.z):(R127i.w));
R6i.w = 0x3f800000;
}
activeMaskStackC[1] = activeMaskStack[0] == true && activeMaskStackC[0] == true;
if( activeMaskStackC[1] == true ) {
// 0
PV0i.w = floatBitsToInt(-(intBitsToFloat(R7i.x)));
PV0i.w = floatBitsToInt(intBitsToFloat(PV0i.w) * 2.0);
// 1
R123i.z = floatBitsToInt((mul_nonIEEE(intBitsToFloat(PV0i.w),intBitsToFloat(uf_remappedPS[2].y)) + intBitsToFloat(uf_remappedPS[2].z)));
PV1i.z = R123i.z;
PS1i = floatBitsToInt(1.0 / -(intBitsToFloat(PV0i.w)));
// 2
R0i.x = floatBitsToInt(intBitsToFloat(PV1i.z) * intBitsToFloat(PS1i));
}
// export
passPixelColor0 = vec4(intBitsToFloat(R6i.x), intBitsToFloat(R6i.y), intBitsToFloat(R6i.z), intBitsToFloat(R6i.w));
// export
gl_FragDepth = vec4(intBitsToFloat(R0i.x), 0, 0, 0).x;
}
